* hylab
This repository collects some of the useful functions and macros that
I wrote or borrowed for hylang. I am more accustomed to the common
lisp syntax, so I borrowed from the nice work of riktor on [[https://github.com/riktor/hycl/][hycl]] to 
make hylang more friendly to people coming from common lisp. 

** Installation
To install
#+BEGIN_SRC 
pip install git+https://github.com/guanyilun/hylab/
#+END_SRC

** Examples
To start with, import the core library
#+BEGIN_SRC hy :session :exports code :results none
(import [hylab.core [*]])
(require [hylab.core [*]])
#+END_SRC

#+BEGIN_SRC hy :session :exports both :results output
(setf x 10)
(defun plus-one (x) 
    (inc x)
)
#+END_SRC

#+BEGIN_SRC hy :session :exports both :results output
(print (plus-one x))
#+END_SRC

#+RESULTS:
: 11

Numpy and plt are already loaded by default

#+BEGIN_SRC hy :session :exports both :results output
(print (np.arange 0 10))
#+END_SRC

#+RESULTS:
: [0 1 2 3 4 5 6 7 8 9]

Numpy array indexing can be done by
#+BEGIN_SRC hy :session :exports both :results output
(setf x (np.random.randn 100 100 100))
(nget x 0 1 :10)
#+END_SRC

#+RESULTS:
#+begin_example
array([ 0.87120279, -1.66700778,  0.26169724, -0.60144387,  0.55433208,
       -0.43233873, -1.11727772,  0.41093365,  0.36703862, -1.88770578])
#+end_example

With Ellipsis
#+BEGIN_SRC hy :session :exports both :results output
(. (nget x ... 0:10) shape)
#+END_SRC

#+RESULTS:
: (100, 100, 10)

Add new columns
#+BEGIN_SRC hy :session :exports both :results output
(. (nget x ... None) shape)
#+END_SRC

#+RESULTS:
: (100, 100, 100, 1)

I also wrote a macro that handles a quick python->hy equation
translation which I found very useful. For example, consider this

#+BEGIN_SRC hy :session :exports both :results output
(let ((x (np.linspace 0 10 10)))
    (+ (** (np.sin x) 2) (** (np.cos x) 2)))
#+END_SRC

#+RESULTS:
: array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])

It can be written as 

#+BEGIN_SRC hy :session :exports both :results output
(let ((x (np.linspace 0 10 10)))
    ($ "np.sin(x)**2+np.cos(x)**2"))
#+END_SRC

#+RESULTS:
: array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])

This is different to the =py-eval= function as this is a macro that gets
converted into the previous (lisp) notation at compile time instead of
at run time so there is no performance issue. 

The same symbol represents curry when used as tag macro
#+BEGIN_SRC hy :session :exports both :results output
(tuple (map #$(+ 10) '(1 2 3 4 5)))
#+END_SRC

#+RESULTS:
: [11, 12, 13, 14, 15]

This is equivalent to using the tag macro for tuple
#+BEGIN_SRC hy :session :exports both :results output
#t(map #$(+ 10) '(1 2 3 4 5))
#+END_SRC

#+RESULTS:
: (11, 12, 13, 14, 15)

Similarly 
#+BEGIN_SRC hy :session :exports both :results output
#t(map #$(+ 10) '(1 2 3 4 5))
#l(map #$(+ 10) '(1 2 3 4 5))
#a(map #$(+ 10) '(1 2 3 4 5))
#h(map #$(+ 10) '(1 2 3 4 5))
#+END_SRC

#+RESULTS:
: (11, 12, 13, 14, 15)
: [11, 12, 13, 14, 15]
: array([11, 12, 13, 14, 15])
: HyExpression([11, 12, 13, 14, 15])

Get elements of lists or tuples
#+BEGIN_SRC hy :session :exports both :results output
(let ((x '((1 2) (3 4) (5 6))))
    (lget x 0 :))
#+END_SRC

#+RESULTS:
: array([1, 2])

#+BEGIN_SRC hy :session :exports both :results output
(let ((x '((1 2) (3 4) (5 6))))
    (lget x None ...))
#+END_SRC

#+RESULTS:
: array([[[1, 2],
:         [3, 4],
:         [5, 6]]])

Threading
#+BEGIN_SRC hy :session :exports both :results output
(let ((x (np.arange 1 10)))
    (as-> x it
          (/ 100 it)
          (+ it 3)
          (np.sin it)
          (** it 2 )))
#+END_SRC

#+RESULTS:
: array([0.38811483, 0.15675672, 0.95855331, 0.07338995, 0.71608897,
:        0.53169132, 0.99995163, 0.04262882, 0.99932125])

This can also be written as
#+BEGIN_SRC hy :session :exports both :results output
(let ((x (np.arange 1 10)))
    (=> x 
        (/ 100 _)
        (+ 3)
        (np.sin)
        (** 2)))
#+END_SRC

#+RESULTS:
: array([0.38811483, 0.15675672, 0.95855331, 0.07338995, 0.71608897,
:        0.53169132, 0.99995163, 0.04262882, 0.99932125])

Quick plotting tools 
#+BEGIN_SRC hy :session :exports code :results output
  (setf x (np.linspace 1 10 100))
  (setf y (np.sin x))
  (plot 
      x y "r-" 
      y x "g-" 
      :xlabel "x"
      :ylabel "y"
      :title "Test Plot"
      :legend ["Line1" "Line2"]
      :savefig "plots/test.png"
      :show)
#+END_SRC

#+RESULTS:
[[./plots/test.png]]

More to come ...

** Credits
- Credits to riktor from whom I borrowed lots of codes.
- I also borrowed some codes from Eric Kaschalk. 
- The template is based on cookiecutter-pypackage. 
** License
MIT
