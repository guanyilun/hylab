* hylab
This repository collects some of the useful functions and macros that
I wrote or borrowed for hylang. I am more accustomed to the common
lisp syntax, so I borrowed from the nice work of riktor on [[https://github.com/riktor/hycl/][hycl]] to
make hylang more friendly to people coming from common lisp.
** Prerequisite
hy==0.17.0
** Installation
To install
#+BEGIN_SRC
pip install git+https://github.com/guanyilun/hylab/
#+END_SRC

** Examples
To start with, import the core library
#+BEGIN_SRC hy :session :exports code :results none
(import [hylab.core [*]])
(require [hylab.core [*]])
#+END_SRC

#+BEGIN_SRC hy :session :exports both :results output
(setf x 10)
(defun plus-one (x)
    (inc x)
)
#+END_SRC

#+BEGIN_SRC hy :session :exports both :results output
(print (plus-one x))
#+END_SRC

#+RESULTS:
: 11

One can also use ~defparameter~ which is the same as ~setv~ or ~setf~,
however I find it more readable to use this exclusively for global
variables.

#+BEGIN_SRC hy :session :exports both :results output
(defparameter *global-var* 10)
(print *global-var*)
#+END_SRC

#+RESULTS:
: 10

~numpy~ and ~plt~ are also loaded automatically

#+BEGIN_SRC hy :session :exports both :results output
(print (np.arange 0 10))
#+END_SRC

#+RESULTS:
: [0 1 2 3 4 5 6 7 8 9]

~numpy~ array indexing can be done by
#+BEGIN_SRC hy :session :exports both :results output
(setf x (np.random.randn 100 100 100))
(nget x 0 1 :10)
#+END_SRC

#+RESULTS:
#+begin_example
array([ 0.87120279, -1.66700778,  0.26169724, -0.60144387,  0.55433208,
       -0.43233873, -1.11727772,  0.41093365,  0.36703862, -1.88770578])
#+end_example

With ~Ellipsis~
#+BEGIN_SRC hy :session :exports both :results output
(. (nget x ... 0:10) shape)
#+END_SRC

#+RESULTS:
: (100, 100, 10)

Add new columns
#+BEGIN_SRC hy :session :exports both :results output
(. (nget x ... None) shape)
#+END_SRC

#+RESULTS:
: (100, 100, 100, 1)

Some more examples of ~nget~
#+BEGIN_SRC hy :session :exports code :results output
  (setf a (.reshape (np.arange 36) (, 6 6)))
#+END_SRC

#+RESULTS:
: array([[ 0,  1,  2,  3,  4,  5],
:        [ 6,  7,  8,  9, 10, 11],
:        [12, 13, 14, 15, 16, 17],
:        [18, 19, 20, 21, 22, 23],
:        [24, 25, 26, 27, 28, 29],
:        [30, 31, 32, 33, 34, 35]])

#+BEGIN_SRC hy :session :exports both :results output
  (nget a (, 0 1 2 3 4) (, 1 2 3 4 5))
#+END_SRC

#+RESULTS:
: array([ 1,  8, 15, 22, 29])

#+BEGIN_SRC hy :session :exports both :results output
  (nget a 3: (, 0 2 5))
#+END_SRC

#+RESULTS:
: array([[18, 20, 23],
:        [24, 26, 29],
:        [30, 32, 35]])

#+BEGIN_SRC hy :session :exports both :results output
  (setf mask (np.array (, 1 0 1 0 0 1) :dtype bool))
  (nget a mask  2)
#+END_SRC

#+RESULTS:
: array([ True, False,  True, False, False,  True])
: array([ 2, 14, 32])

#+BEGIN_SRC hy :session :exports both :results output
  (nget a ::2 3)
  (nget a ::2 3 None)
  (nget a ... 0)
#+END_SRC

#+RESULTS:
: array([ 3, 15, 27])
: array([[ 3],
:        [15],
:        [27]])
: array([ 0,  6, 12, 18, 24, 30])

Quick python->hy equation translation,

#+BEGIN_SRC hy :session :exports both :results output
(let ((x (np.linspace 0 10 10)))
    (+ (** (np.sin x) 2) (** (np.cos x) 2)))
#+END_SRC

#+RESULTS:
: array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])

It can be written as

#+BEGIN_SRC hy :session :exports both :results output
(let ((x (np.linspace 0 10 10)))
    ($ "np.sin(x)**2+np.cos(x)**2"))
#+END_SRC

#+RESULTS:
: array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])

This is different to the =py-eval= function as this is a macro that
gets converted into the previous (lisp) notation at compile time so
there is no performance issue.

The same symbol represents curry when used as tag macro
#+BEGIN_SRC hy :session :exports both :results output
(tuple (map #$(+ 10) '(1 2 3 4 5)))
#+END_SRC

#+RESULTS:
: (11, 12, 13, 14, 15)

This is equivalent to using the tag macro for tuple
#+BEGIN_SRC hy :session :exports both :results output
#t(map #$(+ 10) '(1 2 3 4 5))
#+END_SRC

#+RESULTS:
: (11, 12, 13, 14, 15)

Similarly
#+BEGIN_SRC hy :session :exports both :results output
#t(map #$(+ 10) '(1 2 3 4 5))
#l(map #$(+ 10) '(1 2 3 4 5))
#a(map #$(+ 10) '(1 2 3 4 5))
#h(map #$(+ 10) '(1 2 3 4 5))
#+END_SRC

#+RESULTS:
: (11, 12, 13, 14, 15)
: [11, 12, 13, 14, 15]
: array([11, 12, 13, 14, 15])
: HyExpression([11, 12, 13, 14, 15])

Some convenient conversions (to HySymbol) for macros
#+BEGIN_SRC hy :session :exports both :results output
#sym"my-var1"
#sym 'my-var2
#."my-var3"
#. 'my-var4
#+END_SRC

#+RESULTS:
: HySymbol('my-var1')
: HySymbol('my-var2')
: HySymbol('.my-var3')
: HySymbol('.my-var4')

Lambda expression, the following three expressions are equivalent, the
first is the built-in notation from hylang, the second is a common
lisp like alias and the last is a unicode alias.
#+BEGIN_SRC hy :session :exports both :results output
#l(map (fn [x] (1+ x)) [1 2 3])
#l(map (lambda (x) (1+ x)) [1 2 3])
#l(map (Î» (x) (1+ x)) [1 2 3])
#+END_SRC

#+RESULTS:
: [2, 3, 4]
: [2, 3, 4]
: [2, 3, 4]

Get elements of lists or tuples
#+BEGIN_SRC hy :session :exports both :results output
(let ((x '((1 2) (3 4) (5 6))))
    (lget x 0 :))
#+END_SRC

#+RESULTS:
: array([1, 2])

#+BEGIN_SRC hy :session :exports both :results output
(let ((x '((1 2) (3 4) (5 6))))
    (lget x None ...))
#+END_SRC

#+RESULTS:
: array([[[1, 2],
:         [3, 4],
:         [5, 6]]])

Threading
#+BEGIN_SRC hy :session :exports both :results output
(let ((x (np.arange 1 10)))
    (as-> x it
          (/ 100 it)
          (+ it 3)
          (np.sin it)
          (** it 2 )))
#+END_SRC

#+RESULTS:
: array([0.38811483, 0.15675672, 0.95855331, 0.07338995, 0.71608897,
:        0.53169132, 0.99995163, 0.04262882, 0.99932125])

This can also be written as (borrowed from riktor)
#+BEGIN_SRC hy :session :exports both :results output
(let ((x (np.arange 1 10)))
    (=> x
        (/ 100 _)
        (+ 3)
        (np.sin)
        (** 2)))
#+END_SRC

#+RESULTS:
: array([0.38811483, 0.15675672, 0.95855331, 0.07338995, 0.71608897,
:        0.53169132, 0.99995163, 0.04262882, 0.99932125])

Quick plotting tools
#+BEGIN_SRC hy :session :exports code :results output
  (setf x (np.linspace 1 10 100))
  (setf y (np.sin x))
  (plot
      x y "r-"
      y x "g-"
      :xlabel "x"
      :ylabel "y"
      :title "Test Plot"
      :legend ["Line1" "Line2"]
      :savefig "plots/test.png"
      :show)
#+END_SRC

#+RESULTS:
[[./plots/test.png]]

For printing
#+BEGIN_SRC hy :session :exports both :results output
(setf
  age 99
  height 2.2)

(print (+ "I am " (str age) " years old, and I am " (str height) " m tall"))
#+END_SRC

#+RESULTS:
: I am 99 years old, and I am 2.2 m tall

A simpler way of printing is
#+BEGIN_SRC hy :session :exports both :results output
(print (.format "I am {} years old, and I am {} m tall" age height))
#+END_SRC

#+RESULTS:
: I am 99 years old, and I am 2.2 m tall

An even simpler way of printing from hylab
#+BEGIN_SRC hy :session :exports both :results output
(print #f"I am {age} years old, and I am {height} m tall")
#+END_SRC

#+RESULTS:
: I am 99 years old, and I am 2.2 m tall

Clearly this is inspired by f-string in python. It allows arbitrary
s-expression too

#+BEGIN_SRC hy :session :exports both :results output
(print #f"I am {(inc age)} years old, and I am {(round (* np.pi height) 2)} m tall")
#+END_SRC

#+RESULTS:
: I am 100 years old, and I am 6.91 m tall

It should work with format options too (though there may be cases that
I haven't considered, PR is welcomed).

#+BEGIN_SRC hy :session :exports both :results output
(print #f"Pi = {np.pi:8.2f}")
#+END_SRC

#+RESULTS:
: Pi =     3.14

#+BEGIN_SRC hy :session :exports both :results output
(setf n "cat")
(print #f"Animal: {n:5}")
(print #f"Animal: {n:>5}")
(print #f"Animal: {n:^5}")
(print #f"Animal: {n:*^5}")
#+END_SRC

#+RESULTS:
: Animal: cat
: Animal:   cat
: Animal:  cat
: Animal: *cat*

I also included codes from [[https://github.com/riktor/hyiter/][hyiter]] written by riktor, which I find
amazing. Here are some examples that I borrowed directly from hyiter
to showcase this function

*NEEDS FIXING for hy==0.17.0*

#+BEGIN_SRC hy :session :exports both :results output
;; loop on iterable
(itr
  (for i in '(1 2 3))
  (print i))
#+END_SRC

#+RESULTS:
: 1
: 2
: 3

#+BEGIN_SRC hy :session :exports both :results output
(print (itr
         (for i in (range 10))
         (when (= (% i 2) 0)
           (collect (* 10 i)))))
#+END_SRC

#+RESULTS:
: [0, 20, 40, 60, 80]

#+BEGIN_SRC hy :session :exports both :results output
(itr
  (initially
    (print "LOOP Start!"))
  (for i in '(1 2 3))
  (print i))
#+END_SRC

#+RESULTS:
: LOOP Start!
: 1
: 2
: 3

#+BEGIN_SRC hy :session :exports both :results output
(itr
  (for i in '(1 2 3))
  (print i)
  (finally
    (print "LOOP Finish!")))
#+END_SRC

#+RESULTS:
: 1
: 2
: 3
: LOOP Finish!

#+BEGIN_SRC hy :session :exports both :results output
(print (itr
         (for i in (range 10))
         (maximize i)))
#+END_SRC

#+RESULTS:
: 9

#+BEGIN_SRC hy :session :exports both :results output
(print (itr
         (for i in (range 10))
         (count (= (% i 2) 0))))
#+END_SRC

#+RESULTS:
: 5

This is only a subset of what's possible, for more details please
refer to [[https://github.com/riktor/hyiter/blob/master/Usage.ipynb][this link]].

More to come ...

** Credits
- Credits to riktor from whom I borrowed lots of codes.
- I also borrowed some codes from Eric Kaschalk.
- The template is based on cookiecutter-pypackage.
** License
MIT
